<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stack For Yourself</title>
    <description>A collection of resources on web development.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 15 Jul 2016 23:49:46 -0400</pubDate>
    <lastBuildDate>Fri, 15 Jul 2016 23:49:46 -0400</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Uncategorized algorithms</title>
        <description>&lt;h1 id=&quot;challenges&quot;&gt;Challenges&lt;/h1&gt;

&lt;p&gt;Codewars [http://www.codewars.com/dashboard]
CodeEval [https://www.codeeval.com/dashboard/]
Programmr challenges [http://www.programmr.com/zone/ruby]
Codequizzes [http://www.codequizzes.com/]
CodeForces Problem Sets [http://codeforces.com/problemset]
Exercism [http://exercism.io/onboarding/install-cli]
Codility [https://codility.com/programmers/]
Rubeque [http://www.rubeque.com/problems]
CodeForces [http://codeforces.com/problemset]
Codeabbey [http://www.codeabbey.com/]
Project Euler problems [https://projecteuler.net/archives]
           solutions [https://code.google.com/p/projecteuler-solutions/wiki/ProjectEulerSolutions]
RubyQuiz: http://rubyquiz.com/&lt;/p&gt;

&lt;p&gt;Algosaur [http://algosaur.us/]&lt;/p&gt;
</description>
        <pubDate>Sun, 01 May 2016 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/2016/05/01/algorithms-uncategorized/</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/05/01/algorithms-uncategorized/</guid>
        
        <category>algorithms</category>
        
        
      </item>
    
      <item>
        <title>Uncategorized</title>
        <description>&lt;p&gt;My resume: https://resume.creddle.io/
Triplebyte http://blog.triplebyte.com/bootcamps-vs-college&lt;/p&gt;

&lt;p&gt;Such as:
https://www.madetech.com/careers/full-stack-engineer
https://www.themuse.com/jobs/hometeam/fullstack-engineer-14af5c
https://www.blueapron.com/pages/jobs&lt;/p&gt;

&lt;p&gt;Cracking the Coding Interview
Apprentice.io: http://www.apprentice.io/&lt;/p&gt;

&lt;p&gt;Interview support:
Coderrust http://www.coderust.com/
interview.io http://interviewing.io/
Interview cake https://www.interviewcake.com/question/ruby/stock-price
Codility https://codility.com/&lt;/p&gt;

&lt;p&gt;Handling clients: http://blog.hightail.com/how-to-handle-clients-by-a-client/&lt;/p&gt;

&lt;p&gt;NYCDevs Slack channel: https://nycdevs.slack.com/messages/general/
Peter Hurford’s personal page: http://peterhurford.com/
Find other Rubyists: https://www.reddit.com/r/ruby/comments/4jktya/where_do_rubyists_hang_out_online_these_days/&lt;/p&gt;

&lt;p&gt;Seeking software dev work: http://lesswrong.com/lw/hd1/maximizing_your_donations_via_a_job/
“Don’t call yourself a programmer”: http://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/
“How to fail as a programmer” :http://blog.excelwithcode.com/software-product-failure.html
“Four steps to google without a degree”: https://medium.com/always-be-coding/four-steps-to-google-without-a-degree-8f381aa6bd5e#.sbzhzgc7y
“Always be coding”: https://medium.com/always-be-coding/abc-always-be-coding-d5f8051afce2#.c03lox9py
Practicing for coding interview: https://www.codeschool.com/blog/2015/12/01/5-ways-practice-coding-interview/
DevPost: http://devpost.com/
Graduated Code School, Now What? https://www.kcoleman.me/blog/2015/12/06/i-graduated-from-a-code-school-now-what/&lt;/p&gt;

&lt;p&gt;Brooklyn Hackathon Events: https://www.eventbrite.com/d/ny–brooklyn/hackathon/?crt=regular&amp;amp;slat=40.5926724&amp;amp;slng=-73.9888682&amp;amp;sort=best&amp;amp;view=list&lt;/p&gt;

&lt;p&gt;UpWork: https://www.upwork.com/Login?redir=%2Fhome
WeWorkRemotely: https://weworkremotely.com/
PhishMe: http://phishme.com/company/careers/
Triplebyte: https://triplebyte.com/
Muse jobs: https://www.themuse.com/jobs&lt;/p&gt;

&lt;p&gt;Ruby on Rails interviews: http://blog.mypath.io/ruby-on-rails-interview-questions-that-will-land-you-the-job/?utm_source=so&amp;amp;utm_medium=reddit&amp;amp;utm_campaign=rubyonrailsinterview
More Ruby interviews: http://www.sitepoint.com/ruby-interview-questions-problem-walkthroughs/?utm_source=rubyweekly&amp;amp;utm_medium=email
The Art of Ruby Technical Interviews: http://technology.customink.com/blog/2015/11/23/the-art-of-ruby-technical-interviews/&lt;/p&gt;

&lt;p&gt;General news:
InfoQ: http://www.infoq.com/&lt;/p&gt;

&lt;p&gt;Conferences:
Ruby conferences: http://rubyconferences.org/
“Get Your Conference Proposal Accepted”: http://schneems.com/blogs/2016-04-07-conference-proposal/?utm_source=rubyweekly&amp;amp;utm_medium=email&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jan 2016 00:00:00 -0500</pubDate>
        <link>http://yourdomain.com/2016/01/01/work-uncategorized/</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/01/01/work-uncategorized/</guid>
        
        <category>working</category>
        
        
      </item>
    
      <item>
        <title>SQL cheatsheet</title>
        <description>&lt;p&gt;To run SQLite3 from console:
sqlite3 [filename.sqlite]&lt;/p&gt;

&lt;p&gt;Operators: [ =, !=, &amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;=]  # testing equality is done with one equal sign
Wildcards: [ * (any),
                     _ (inside string, meaning can be substituted for whatever),
                    % (inside string, meaning can be of any length or whatever after),&lt;/p&gt;

&lt;p&gt;CREATE (makes new table)
CREATE TABLE (table name) (arg type, arg type, … etc);
# =&amp;gt; CREATE TABLE students (id INTEGER, name TEXT, email TEXT);&lt;/p&gt;

&lt;p&gt;INSERT (adds row)
INSERT INTO table (arg, arg, .. etc) VALUES (arg, arg, .. etc);
# =&amp;gt; INSERT INTO students (id, name, email) VALUES (1226, ‘Miri Ng’, ’miriyin@gmail.com’);&lt;/p&gt;

&lt;p&gt;UPDATE (alters value in a row)
UPDATE table SET cell = new_value WHERE other_cell = something;
# =&amp;gt; UPDATE student SET id = 0000 WHERE name = ‘ex-student’&lt;/p&gt;

&lt;p&gt;ALTER (adds column)
          ALTER TABLE table ADD COLUMN column_name TYPE;
          # =&amp;gt; ALTER TABLE students ADD COLUMN grade INTEGER;&lt;/p&gt;

&lt;p&gt;DELETE FROM (deletes rows)
         DELETE FROM table WHERE column IS VALUE;
         # =&amp;gt; DELETE FROM students WHERE id IS NULL;&lt;/p&gt;

&lt;p&gt;SELECT (pulls from table)
          SELECT column FROM table;
# =&amp;gt; SELECT id FROM students;&lt;/p&gt;

&lt;p&gt;SELECT column, second_column FROM table;
# =&amp;gt; SELECT id, name FROM students;&lt;/p&gt;

&lt;p&gt;SELECT DISTINCT genre FROM movies;
# =&amp;gt; unique
# =&amp;gt; SELECT DISTINCT dormitory FROM students;&lt;/p&gt;

&lt;p&gt;SELECT * FROM table WHERE column &amp;gt; VALUE;
# =&amp;gt; SELECT * FROM students WHERE dormitory = ‘Highland’;&lt;/p&gt;

&lt;p&gt;SELECT * FROM table WHERE column LIKE ‘given_value’;
# =&amp;gt; SELECT * FROM table WHERE name LIKE ‘A_y’;&lt;/p&gt;

&lt;p&gt;SELECT * FROM table WHERE column LIKE ‘a%’;
# =&amp;gt; SELECT * FROM students WHERE name LIKE ‘a%’;&lt;/p&gt;

&lt;p&gt;SELECT * FROM movies WHERE name BETWEEN ‘A’ AND ‘J’;&lt;/p&gt;

&lt;p&gt;SELECT * FROM movies WHERE year BETWEEN 1990 AND 2000;
select * from movies where year between 1990 and 2000 and genre = ‘comedy’;&lt;/p&gt;

&lt;p&gt;SELECT * FROM movies WHERE genre = ‘comedy’ OR year &amp;lt; 1980&lt;/p&gt;

&lt;p&gt;SELECT * FROM movies ORDER BY imdb_rating DESC;&lt;/p&gt;

&lt;p&gt;SELECT * FROM movies ORDER BY imdb_rating ASC LIMIT 3;&lt;/p&gt;

&lt;p&gt;++ LIMIT : specifies how many items you want, maximum
++ ORDER BY spots results in ASC or DESC order&lt;/p&gt;

&lt;p&gt;Aggregate functions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      SELECT * FROM fake_apps;

      SELECT COUNT(*) FROM fake_apps;  # will return a count of the column
      # COUNT will count the num of rows for given column arg where value of cell is not NULL

      SELECT COUNT(*) FROM fake_apps WHERE price = 0;

      SELECT COUNT(*) FROM fake_apps WHERE price = 0; # returns two columns, one of price and second of count per price

      SELECT price, COUNT(*) FROM fake_apps WHERE downloads &amp;gt; 20000 GROUP BY price;

      SELECT SUM(downloads) FROM fake_apps; # returns total number of downloads
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;SELECT MAX(downloads) FROM fake_apps; # returns total downloads for most popular app&lt;/p&gt;

&lt;p&gt;SELECT name, category, MAX(downloads) FROM fake_apps GROUP BY category;
  # returns most number of times an app has been downloaded, returns name and category columns&lt;/p&gt;

&lt;p&gt;SELECT MIN(downloads) FROM fake_apps;&lt;/p&gt;

&lt;p&gt;SELECT name, category, MIN(downloads) FROM fake_apps GROUP BY category;
# return names of apps that have been downloaded the least number of times in each category&lt;/p&gt;

&lt;p&gt;SELECT AVG(downloads) FROM fake_apps;
# finds average number of downloads for an app in the database&lt;/p&gt;

&lt;p&gt;SELECT price, AVG(downloads) FROM fake_apps GROUP BY price;
# calculate the average num of downloads at each price
f
SELECT price, ROUND(AVG(downloads), 2) FROM fake_apps GROUP BY price;
# rounds average downloads to a float with two decimal places; just ROUND returns a float with a .0&lt;/p&gt;

&lt;p&gt;Multiple tables&lt;/p&gt;

&lt;p&gt;SELECT * FROM albums JOIN artists ON albums.artist_id = artists.id;
# results win two tables being merged into one on those values&lt;/p&gt;

&lt;h1 id=&quot;primary-key-column-that-serves-as-unique-identifier-for-row-in-the-table-values-must-be-unique-and-not-null&quot;&gt;Primary Key: column that serves as unique identifier for row in the table; values must be unique and not NULL&lt;/h1&gt;
&lt;p&gt;# Foreign Key: column that contains the primary key to another table i the database, used to identify a particular row in referenced foreign table.
# Joins: combine data from multiple table during queries.
# INNER JOIN: combine rows from different tables if JOIN condition is true
# LEFT OUTER JOIN return every row in the left table, and if join conditions are not met, NULL values are used to full in the columns from the RIGHT table.
# AS is a keyword that allows you to rename a column or table using a given alias.&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jan 2016 00:00:00 -0500</pubDate>
        <link>http://yourdomain.com/2016/01/01/sql-cheatsheet/</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/01/01/sql-cheatsheet/</guid>
        
        <category>databases</category>
        
        
      </item>
    
      <item>
        <title>Uncategorized</title>
        <description>&lt;h2 id=&quot;ruby&quot;&gt;Ruby&lt;/h2&gt;

&lt;h1 id=&quot;uncategorized&quot;&gt;Uncategorized&lt;/h1&gt;

&lt;p&gt;Kickstart: https://github.com/JoshCheek/ruby-kickstart
TestFirst teaching: https://github.com/ultrasaurus/test-first-teaching
TestFirst Ruby
Ruby Koans [http://rubykoans.com/]
RubyMonk
JumpStart Labs [http://tutorials.jumpstartlab.com/]
Ruby in 100 minutes [http://tutorials.jumpstartlab.com/projects/ruby_in_100_minutes.html]
Gem with cli executable http://blog.excelwithcode.com/option-parser-in-cli-apps.html&lt;br /&gt;
blog with interactive Ruby http://blog.klipse.tech/ruby/2016/06/20/blog-ruby.html&lt;br /&gt;
coolest Ruby projects:http://blog.teamtreehouse.com/coolest-ruby-projects-ever&lt;br /&gt;
CSV with Ruby - https://blog.udemy.com/ruby-csv/&lt;br /&gt;
JBuilder: https://github.com/rails/jbuilder#jbuilder&lt;/p&gt;

&lt;h1 id=&quot;general-oop&quot;&gt;General OOP:&lt;/h1&gt;
&lt;p&gt;http://inventwithpython.com/blog/2014/12/02/why-is-object-oriented-programming-useful-with-an-role-playing-game-example/&lt;br /&gt;
Writing Ruby compiler: http://hokstad.com/compiler&lt;br /&gt;
Big bunch of resources from Awesome Ruby: http://awesome-ruby.com/?utm_source=rubyweekly&amp;amp;utm_medium=email&lt;br /&gt;
Ruby source code: https://github.com/ruby/ruby/&lt;br /&gt;
Ruby/Rails casts: http://www.grok-interactive.com/podcast/&lt;br /&gt;
Scraping with Ruby: https://learnetto.com/blog/the-beginner-s-guide-scraping-in-ruby-cheat-sheet
Various Rails tutorials: http://www.skilledup.com/guides/learn-ruby-programming-language-course-guide?platform=hootsuite
HackSummit! https://www.crowdcast.io/e/hacksummit-2016
crypt https://github.com/codahale/bcrypt-ruby
remove TurboLinks http://blog.steveklabnik.com/posts/2013-06-25-removing-turbolinks-from-rails-4
Time cheatsheet: http://idiosyncratic-ruby.com/57-what-the-time.html
Ruby heap corruption (wat.) http://webuild.envato.com/blog/tracking-down-ruby-heap-corruption/
change-positive architecture http://icelab.com.au/articles/a-change-positive-ruby-web-application-architecture/
mistakes junior rubyists make http://jetruby.com/expertise/common-ruby-rails-mistakes-beginners-make-model-database/&lt;/p&gt;

&lt;p&gt;OverAPI Ruby Cheatsheet: http://overapi.com/ruby
Ruby core object model: https://www.gliffy.com/go/publish/5152080&lt;/p&gt;

&lt;p&gt;Articles
Variables, constants, literals [http://www.tutorialspoint.com/ruby/ruby_variables.htm]
Procs and lambdas [http://www.skorks.com/2010/05/ruby-procs-and-lambdas-and-the-difference-between-them/]
More procs [http://www.reactive.io/tips/2008/12/21/understanding-ruby-blocks-procs-and-lambdas/]
blocks, props, lambdas http://awaxman11.github.io/blog/2013/08/05/what-is-the-difference-between-a-block/
mutability and freezing [http://www.blackbytes.info/2016/01/ruby-mutability/]
Understanding self in Ruby: http://blog.honeybadger.io/ruby-self-cheat-sheet/?utm_source=rubyweekly&amp;amp;utm_medium=email
Cool articles from PracticingRuby: https://www.practicingruby.com/
Writing a web-crawler: https://rossta.net/blog/how-to-write-a-simple-web-crawler-in-ruby-revisited.html
Ruby tricks you should be using: http://www.rubyinside.com/21-ruby-tricks-902.html?platform=hootsuite
Hash#fetch: http://devblog.avdi.org/2009/03/16/go-fetch/
dataframe datatype [http://zverok.github.io/blog/2016-01-10-dataframe.html]
Ruby style guide https://github.com/bbatsov/ruby-style-guide
AirBnB Ruby Style guide https://github.com/airbnb/ruby
singleton classes http://www.devalot.com/articles/2008/09/ruby-singleton
extending modules http://www.railstips.org/blog/archives/2009/05/15/include-vs-extend-in-ruby/
inject is a fundamental building blok http://renderedtext.com/blog/2016/02/18/inject-is-a-fundamental-building-block/
OO binary search http://fluxusfrequency.github.io/blog/2014/01/31/building-a-binary-search/&lt;/p&gt;

&lt;p&gt;Books
Learn to Program [https://pine.fm/LearnToProgram/]
The Well-Grounded Rubyist
Practical Object-Oriented Design in Ruby
Design Patterns in Ruby
Confident Ruby
Beginning Ruby + Appendix B
Ruby User’s Guide [http://ruby-doc.org/docs/ruby-doc-bundle/UsersGuide/rg/index.html]
Rubyist [http://www.rubyist.net/~slagell/ruby/index.html]
Everyday Scripting With Ruby
Poignant Guide to Ruby
Humble Little Ruby Book
Programming Ruby (Pickaxe) [http://ruby-doc.com/docs/ProgrammingRuby/]
Bastard’s Book of Ruby [http://ruby.bastardsbook.com/toc/]
Eloquent Ruby
more: http://blog.ozim.eu/2016/04/29/books-every-ruby-slash-rails-dev-should-read&lt;/p&gt;

&lt;p&gt;RegExps
Rubular expression checker: http://www.rubular.com/
RegExp cheatsheet: http://overapi.com/regex
Bastard’s Book of Regular Expressions
RegExp crossword [https://regexcrossword.com/]
RegExp tutorial [http://regexone.com/]
[http://code.tutsplus.com/tutorials/you-dont-know-anything-about-regular-expressions–net-7869]
More RegExp [https://medium.com/@leighsn/verbal-expressions-in-ruby-fb8a912221e2#.79j0zoodn]
Ruby User’s Guide, Regexes: http://www.rubyist.net/~slagell/ruby/regexp.html
https://gist.github.com/tannerwelsh/395b89258d2234762b63&lt;/p&gt;

&lt;p&gt;Testing
Mocks and Stubs
RSpec CodeSchool course, part 1 [http://rspec.codeschool.com/levels/1]
RSpec tutorial [https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers]
Write up tests [http://pragmaticstudio.com/blog/2005/3/18/ruby-learning-test-1-are-you-there-world]
rspec tutorial [http://www.webascender.com/Blog/ID/566/Testing-Rails-4-Apps-With-RSpec-3-Part-I#.Vqvnq1MrKV4]
Verifying doubles in RSpec: https://semaphoreci.com/community/tutorials/introduction-to-verifying-doubles-in-rspec?utm_source=rubyweekly&amp;amp;utm_medium=email
Pry [http://pryrepl.org/]&lt;/p&gt;

&lt;p&gt;Refactoring
Refactoring: Ruby Edition
Clean Code
Refactoring: Improving the Design of Existing Code&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jan 2016 00:00:00 -0500</pubDate>
        <link>http://yourdomain.com/2016/01/01/ruby-uncategorized/</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/01/01/ruby-uncategorized/</guid>
        
        <category>ruby</category>
        
        
      </item>
    
      <item>
        <title>Ruby frameworks</title>
        <description>&lt;p&gt;Sinatra:
Sinatra docs: http://www.sinatrarb.com/intro.html&lt;/p&gt;

&lt;p&gt;ActiveRecord:
Associations: http://guides.rubyonrails.org/association_basics.html
Validations and callbacks: http://guides.rubyonrails.org/v3.2.13/active_record_validations_callbacks.html
General overview: http://code.tutsplus.com/tutorials/active-record-the-rails-database-bridge–net-30489&lt;/p&gt;

&lt;p&gt;Other Frameworks:
rebuilding Rails from layers: https://www.reddit.com/r/ruby/comments/2b1su1/rebuilding_rails_or_how_do_i_build_my_own_ruby/
Hanami, another framework for Ruby: http://hanamirb.org/
Hanami oauth w github http://codetunes.com/2016/hanami-with-oauth/
General list: http://blog.cloud66.com/cloud-66-for-rails-new-rack-frameworks-part-2/&lt;/p&gt;

&lt;p&gt;Installs:
RailsFest installs: http://installfest.railsbridge.org/installfest/installfest&lt;/p&gt;

&lt;p&gt;Inspiration:
Love Thy Desk: http://www.lovethydesk.com/&lt;/p&gt;

&lt;p&gt;Rails:
Rails cheatsheet: https://teamgaslight.com/blog/ready-to-try-ruby-an-awesome-rails-cheat-sheet
Rails forums: https://railsforum.com/
Rails Casts: http://railscasts.com/
Rails guides/documentation: http://guides.rubyonrails.org/
Rails API: http://api.rubyonrails.org/
Rails mailers: http://vaidehijoshi.github.io/blog/2015/09/08/youve-got-mail-action-mailer-plus-letter-opener/
Rails debugging cheatsheet http://www.schneems.com/2016/01/25/ruby-debugging-magic-cheat-sheet.html
In-app messaging between users https://gorails.com/episodes/in-app-messaging-between-users?autoplay=1
Stubbing with Rails: https://semaphoreci.com/community/tutorials/stubbing-external-services-in-rails
Testing Rails: http://everydayrails.com/2012/03/12/testing-series-intro.html
RSpec for Rails: https://semaphoreci.com/community/tutorials/how-to-test-rails-models-with-rspec?utm_campaign=community&amp;amp;utm_content=78&amp;amp;utm_medium=email&amp;amp;utm_source=community-subscription
Add chat to a Rails app: https://www.twilio.com/blog/2016/02/add-chat-to-a-rails-app-with-twilio-ip-messaging.html
Rails for Ubuntu: https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-with-rbenv-on-ubuntu-14-04
“This is why learning Rails is hard”: https://www.codefellows.org/blog/this-is-why-learning-rails-is-hard?__s=uvtabrbrcctximf9dhin
Using Devise to authenticate: http://sourcey.com/rails-4-omniauth-using-devise-with-twitter-facebook-and-linkedin/
Devise with twitter: https://gorails.com/episodes/omniauth-twitter-sign-in
Tutorial for Devise: https://www.codementor.io/ruby-on-rails/tutorial/devise-rails-build-automatic-login-tokens-email
1-page Ajaxified Rails site: https://codediode.io/lessons/1904-ajaxified-one-page-application-with-rails
Building a Reddit-like commentating site: https://www.codementor.io/ruby-on-rails/tutorial/threaded-comments-polymorphic-associations
Stripe with Rails: https://launchschool.com/blog/stripe-checkout
CRUD interface with React and Rails: http://tutorials.pluralsight.com/ruby-ruby-on-rails/building-a-crud-interface-with-react-and-ruby-on-rails
Heroku’s Intro to Ruby [https://devcenter.heroku.com/articles/getting-started-with-ruby#introduction]
LevelUP courses [https://www.leveluprails.com/]
Capybara [https://github.com/jnicklas/capybara]
Everyday Rails with RSpec
Rails 4 in Action
Ruby Science
Agile Web Development With Rails
Learn Ruby on Rails
React with Devise forms https://labs.chie.do/authenticating-your-reactjs-app-with-devise-no-extra-gems-needed/?utm_source=Rails%20Forum&amp;amp;utm_medium=Answering%20Posting&amp;amp;utm_campaign=Rails-forum-answer–posting
WYSIWYG postings editor! https://www.driftingruby.com/episodes/wysiwyg-editor-with-trix
Making Rails asset pipeline faster http://marianposaceanu.com/articles/making-rails-asset-pipeline-faster&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jan 2016 00:00:00 -0500</pubDate>
        <link>http://yourdomain.com/2016/01/01/ruby-frameworks/</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/01/01/ruby-frameworks/</guid>
        
        <category>ruby</category>
        
        
      </item>
    
      <item>
        <title>Uncategorized mobile</title>
        <description>&lt;p&gt;Push notifications: https://www.pushwoosh.com/
Framework7, HTML/JS framework for mobile: http://framework7.io/&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jan 2016 00:00:00 -0500</pubDate>
        <link>http://yourdomain.com/2016/01/01/mobile-uncategorized/</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/01/01/mobile-uncategorized/</guid>
        
        <category>mobile</category>
        
        
      </item>
    
      <item>
        <title>JavaScript uncategorized links</title>
        <description>&lt;p&gt;JavaScript
Javascript &amp;amp; JQuery, Jon Duckett
Awesome collection of stuff: https://frontendmasters.com/courses/
intro to OOJS: http://code.tutsplus.com/tutorials/the-basics-of-object-oriented-javascript–net-7670
OverAPI JS Cheatsheet: http://overapi.com/javascript
JSFiddle: https://jsfiddle.net/
MDN Docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript
GirlDevelopIt Intro to JS course: https://www.girldevelopit.com/materials/intro-js
JS events: http://www.w3schools.com/js/js_events.asp
JS Events and the call stack: http://bit.ly/1Btu0Iy
Semicolons in JS: https://www.codecademy.com/blog/78
JS in chrome: https://developer.chrome.com/devtools/docs/console
JS Design Patterns: https://addyosmani.com/resources/essentialjsdesignpatterns/book/
JS mini-course: http://ejohn.org/apps/learn/
Opal: Ruby to JS compiler: http://opalrb.org/
TDD With JS: http://tutorials.pluralsight.com/front-end-javascript/introduction-to-test-driven-development-in-javascript
Stopping Rails from including all your JS files: http://theflyingdeveloper.com/controller-specific-assets-with-rails-4/
JS Prototypes https://javascriptweblog.wordpress.com/2010/06/07/understanding-javascript-prototypes/
Moment.js - library for including time stuff - http://momentjs.com/
Callbacks http://callbackhell.com/
JSON Web Tokens https://jwt.io/introduction/&lt;/p&gt;

&lt;p&gt;Draft.js
A rich text-editor for the browser: https://facebook.github.io/draft-js/docs/overview.html#content&lt;/p&gt;

&lt;p&gt;Jasmine:
Tutorial on getting setup with Jasmine gem http://jasmine.github.io/2.4/introduction.html
Jasmine syntax and methods: http://jasmine.github.io/2.4/introduction.html&lt;/p&gt;

&lt;p&gt;Frameworks and Libraries for JS:
D3 data visualization: https://github.com/d3/d3
D3 code snippets: https://bl.ocks.org/
Google Visualizations: https://developers.google.com/chart/interactive/docs/reference#development-tip
JS for Data Visualization: http://www.sitepoint.com/twelve-javascript-libraries-data-visualization/
General JS library and framework stuff: https://www.sitepoint.com/top-javascript-frameworks-libraries-tools-use/&lt;/p&gt;

&lt;p&gt;React - FB’s docs: https://facebook.github.io/react/docs/getting-started.html
Pan’s tutorial: https://github.com/panw/react-intro/
React on Rails https://www.youtube.com/watch?v=kTSsZrub5iE&lt;/p&gt;

&lt;p&gt;Mocha.js - main page: https://mochajs.org/&lt;/p&gt;

&lt;p&gt;Underscore.js - Main page: http://underscorejs.org/&lt;/p&gt;

&lt;p&gt;Backbone.js - Developing Backbone.js Applications: https://addyosmani.com/backbone-fundamentals/&lt;/p&gt;

&lt;p&gt;Angular.js - Angular tutorial/docs: https://docs.angularjs.org/tutorial/step_00
Angular.js tutorial https://www.airpair.com/angularjs/building-angularjs-app-tutorial
Angular.js - PhoneCat tutorial: https://docs.angularjs.org/tutorial&lt;/p&gt;

&lt;p&gt;jQuery docs: http://api.jquery.com/
jQuery API events docs: http://api.jquery.com/category/events/
jQuery tabs http://www.mkyong.com/jquery/how-to-use-css-and-jquery-to-hide-and-show-tab-content/
jQuery intro: https://www.smashingmagazine.com/2014/05/mystery-jquery-object-syntax-basic-introduction/&lt;/p&gt;

&lt;p&gt;Node.js - NodeSchool: http://nodeschool.io/
Node.js - OverAPI Node.js Cheatsheet: http://overapi.com/nodejs
Node.js Beginner book: http://www.nodebeginner.org/
Node.js In Action: https://www.manning.com/books/node-js-in-action&lt;/p&gt;

&lt;p&gt;http://stackoverflow.com/questions/14333857/how-to-master-angularjs
Documentation: https://docs.angularjs.org/api
General JS talks: https://talks.devbootcamp.com/?s=JavaScript&lt;/p&gt;

&lt;p&gt;FEM Angular Basics course: https://frontendmasters.com/courses/angularjs-in-depth/
FEM Angular Development: https://frontendmasters.com/courses/angular-app-dev/
FEM Component based architecture: https://frontendmasters.com/courses/angular-components-es6/&lt;/p&gt;

&lt;p&gt;Angular on github: https://github.com/angular/angular.js
Angular.js tutorial https://www.airpair.com/angularjs/building-angularjs-app-tutorial&lt;/p&gt;

&lt;p&gt;Node.js - NodeSchool: http://nodeschool.io/
Node.js - OverAPI Node.js Cheatsheet: http://overapi.com/nodejs
Node.js Beginner book: http://www.nodebeginner.org/
Node.js In Action: https://www.manning.com/books/node-js-in-action&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jan 2016 00:00:00 -0500</pubDate>
        <link>http://yourdomain.com/2016/01/01/javascript-uncategorized/</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/01/01/javascript-uncategorized/</guid>
        
        <category>javascript</category>
        
        <category>frontend</category>
        
        
      </item>
    
      <item>
        <title>General Uncategorized</title>
        <description>&lt;p&gt;Model to emulate:
Bloc.io: https://www.bloc.io/web-developer-career-track
Thinkful: https://www.thinkful.com/
Suggestions: https://www.quora.com/If-you-were-designing-a-syllabus-to-take-a-newbie-like-me-from-a-coding-zero-to-a-Full-Stack-Web-Dev-Hero-in-6-months-and-under-1000-what-would-you-tell-me-to-learn-and-what-online-resources-should-I-use
Resources for Rubyists: https://pragtob.wordpress.com/resources/#Agile
mastery learning http://techcrunch.com/2016/01/09/how-startups-are-solving-a-decades-old-problem-in-education/
general resources: http://www.unforgivableruby.com/post/114752678529/learning-web-developmentrails-without-spending&lt;/p&gt;

&lt;p&gt;What do real programmers do?:
Narkoz scripts: https://github.com/NARKOZ/hacker-scripts&lt;/p&gt;

&lt;p&gt;Complete courses:
Odin Project [http://www.theodinproject.com/ruby-programming]
Viking School prep course: https://www.vikingcodeschool.com/prep
IRN app, JS-based course to learn programming: http://lrnapp.com/
Code Avengers: various free courses to learn basics: https://www.codeavengers.com/profile#intro
TreeHouse, various small courses: https://teamtreehouse.com/
FreeCodeCamp, HTML based courses: https://www.freecodecamp.com/
KhanAcademy courses: https://www.khanacademy.org/
“So You Wanna Learn How To Code? Going from Zero to Programmer Hero in One Guide” http://everydayutilitarian.com/essays/learn-code/
Bento: https://bento.io/
Learn the Hard Way courses: http://programming-motherfucker.com/become.html
Codeschool: http://discover-devtools.codeschool.com/
Videos at Lynda: https://www.lynda.com/&lt;/p&gt;

&lt;p&gt;Challenges:
General challenge list: https://github.com/karan/Projects&lt;/p&gt;

&lt;p&gt;Important articles:
Your first 100 hours of code: https://www.vikingcodeschool.com/posts/the-beginner-s-dilemma-your-first-100-hours-of-code
Why learning to code is so damn hard: https://www.vikingcodeschool.com/posts/why-learning-to-code-is-so-damn-hard
Paul Ford, “What is Code?”: http://www.bloomberg.com/graphics/2015-paul-ford-what-is-code/&lt;/p&gt;

&lt;p&gt;Uptime Robot: http://kaffeine.herokuapp.com/
Work on this: https://courses.edx.org/courses/course-v1:HarvardX+CS50+X/info&lt;/p&gt;

&lt;p&gt;(Uncategorized)
Tips for front-end: https://medium.freecodecamp.com/101-ways-to-make-your-website-more-awesome-79c934dd2a11#.5yci2z37b
API directory http://www.programmableweb.com/apis/directory
Using Vagrant VMs for Rails development https://gorails.com/guides/using-vagrant-for-rails-development
HTTP Basics: http://www3.ntu.edu.sg/home/ehchua/programming/webprogramming/http_basics.html
WAT Hilarious talk: https://www.destroyallsoftware.com/talks/wat
Essential O’Really?! books: http://imgur.com/gallery/vqUQ5
Classic Programmer Paintings: http://classicprogrammerpaintings.com/archive#&lt;em&gt;=&lt;/em&gt;
ngnix HTTP Load balancer http://nginx.org/en/docs/http/load_balancing.html
HTTP Status Cats API: https://http.cat/
UNIX philosophy http://www.catb.org/esr/writings/taoup/html/ch01s06.html
Heisenberg dev http://mikehadlow.blogspot.com/2014/06/heisenberg-developers.html
Makers schedule http://www.paulgraham.com/makersschedule.html
Good programming books: http://sixrevisions.com/lists/free-books-code/
Rise of APIs http://techcrunch.com/2016/05/21/the-rise-of-apis/?ncid=rss&amp;amp;utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+Techcrunch+%28TechCrunch%29&lt;/p&gt;

&lt;p&gt;make repo show pages on github https://help.github.com/articles/creating-project-pages-manually/
writing good documentation http://www.writethedocs.org/guide/writing/beginners-guide-to-docs/&lt;/p&gt;

&lt;p&gt;Agile:
ThoughtBot’s Playbook: http://playbook.thoughtbot.com/&lt;/p&gt;

&lt;p&gt;Docker:
Diff between images and containers http://stackoverflow.com/questions/23735149/docker-image-vs-container
Getting started and check status commands: https://docs.docker.com/machine/get-started/&lt;/p&gt;

&lt;p&gt;Git and Github:
Git basics [https://git-scm.com/doc]
Git cheatsheet: http://overapi.com/git
Github MarkDown tutorial: https://help.github.com/articles/basic-writing-and-formatting-syntax/&lt;/p&gt;

&lt;p&gt;Being a new developer:
Apprenticeship Patterns [http://chimera.labs.oreilly.com/books/1234000001813/index.html]
Level up as a dev: https://medium.freecodecamp.com/how-to-level-up-as-a-developer-87344584777c#.2x5iu4n2i
New Programmer’s Survival Manual&lt;/p&gt;

&lt;p&gt;Typing:
typing-io - Ruby on Rails course [https://typing.io/lesson]&lt;/p&gt;

&lt;p&gt;Organizing projects:
Trello: https://trello.com/&lt;/p&gt;

&lt;p&gt;Command Line:
Bash reference manual: http://www.gnu.org/software/bash/manual/bashref.html
Bash cheatsheet: http://cli.learncodethehardway.org/bash_cheat_sheet.pdf
OverTheWire Command Line game: http://overthewire.org/wargames/bandit/
Command Line Crash Course [http://cli.learncodethehardway.org/book/]&lt;/p&gt;

&lt;p&gt;Data Science:
Kaggle.com: https://www.kaggle.com/competitions
Kaggle: Predict Titanic’s survival: https://www.kaggle.com/c/titanic
Statistical data mining: http://www.autonlab.org/tutorials/
MapReduce with Hadoop and Ruby: https://speakerdeck.com/swanandp/build-your-first-mapreduce-with-hadoop-and-ruby
Hadoop MapReduce tutorial: https://hadoop.apache.org/docs/r1.2.1/mapred_tutorial.html
MapReduce with Ruby and Apache: http://blog.cloudera.com/blog/2011/01/map-reduce-with-ruby-using-apache-hadoop/&lt;/p&gt;

&lt;p&gt;Object Oriented Programming:
Law of Demeter: http://devblog.avdi.org/2011/07/05/demeter-its-not-just-a-good-idea-its-the-law/&lt;/p&gt;

&lt;p&gt;General CompSci:
Sorting algorithms animations: http://www.sorting-algorithms.com/
Coursera: Algorithms I and II: https://www.coursera.org/course/algs4partI
Classic papers in programming languages and logic: http://www.cs.cmu.edu/~crary/819-f09/
RosettaCode: http://rosettacode.org/wiki/Rosetta_Code
CompSci free online courses: http://wayback.archive-it.org/3671/20150528220118/https://www.extension.harvard.edu/open-learning-initiative/intensive-introduction-computer-science
Awesome programming books: http://www.catonmat.net/blog/top-100-books-part-one/?platform=hootsuite&lt;/p&gt;

&lt;p&gt;Big-O cheat-sheet http://bigocheatsheet.com/&lt;/p&gt;

&lt;p&gt;Chromebook webdev:
Tutorial for getting started: https://medium.com/@martinmalinda/ultimate-guide-for-web-development-on-chromebook-part-1-crouton-2ec2e6bb2a2d#.ayk5cv7w1&lt;/p&gt;

&lt;p&gt;Text Editors:
Atom keyboard cheatsheet: http://blog.bugsnag.com/atom-editor-cheat-sheet&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jan 2016 00:00:00 -0500</pubDate>
        <link>http://yourdomain.com/2016/01/01/general-uncategorized/</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/01/01/general-uncategorized/</guid>
        
        <category>general</category>
        
        
      </item>
    
      <item>
        <title>Uncategorized HTML front end stuff</title>
        <description>&lt;p&gt;Jekyll:
Jekyll tags from scratch: http://charliepark.org/tags-in-jekyll/&lt;/p&gt;

&lt;p&gt;Inspiration:
Amazing 1-page sites: https://onepagelove.com/gallery/landing-page
stricte 1 page site: http://stricte.io/#hello&lt;/p&gt;

&lt;p&gt;Color and Fonts
Google Fonts: https://www.google.com/fonts
Color Wheel with HEX codes etc: https://color.adobe.com/create/color-wheel/
“A Simple Web Developer’s Guide to Color”: https://www.smashingmagazine.com/2016/04/web-developer-guide-color/
Free high quality photos: https://unsplash.com/
Make your own visuals: https://www.canva.com/&lt;/p&gt;

&lt;p&gt;Visual Front-end Design:
Balsamiq Mockups: https://balsamiq.com/products/mockups/
Mockingbird mockups: https://gomockingbird.com/home
Slides: ‘Designing for Performance’ : https://speakerdeck.com/lara/designing-for-performance
“Why Devs Need to Learn Design”: http://www.cognition.happycog.com/article/why-developers-need-to-learn-design
“Planning a Design Project”: http://webdesign.tutsplus.com/articles/planning-a-design-project–webdesign-13277
“Planning and Scheming: How We Start a Web Design Project”: http://bigseadesign.com/web-design/planning-and-scheming-how-we-start-a-web-design-project
“6 Phases of the Web Site Design and Development Process”: http://www.idesignstudios.com/blog/web-design/phases-web-design-development-process/#.VyYyXaMrKV7
“Design is About Solving Problems”: https://www.smashingmagazine.com/2011/08/design-solving-problems/
“What is UX Design?” https://www.smashingmagazine.com/2010/10/what-is-user-experience-design-overview-tools-and-resources/
Design for Developers resources: https://gist.github.com/jenmyers/7354863
HTML view any page’s tree layout: https://htmltree.peterbe.com/
make icons: https://iconsflow.com/
bootstrap themes: http://bootswatch.com/
free front-end stuff: http://www.premiumpixels.com/&lt;/p&gt;

&lt;p&gt;Responsiveness
Codeply, Responsive Design Cheatsheet: http://www.codeply.com/responsive-design-cheatsheet.html
Google chrome devs responsive design: https://developers.google.com/web/fundamentals/getting-started/your-first-multi-screen-site/responsive?hl=en&lt;/p&gt;

&lt;p&gt;HTML
HTML &amp;amp; CSS, Jon Duckett
Learn to Code HTML &amp;amp; CSS online tutorial: http://learn.shayhowe.com/html-css/
HTML5Rocks HTML5, CSS tutorials: http://www.html5rocks.com/en/tutorials/?page=1
HTML head: https://www.w3.org/wiki/The_HTML_head_element#Head.3F_What_head_are_we_talking_about.3F
Little tutorials: http://thecodeplayer.com/
HTML tags list: https://developers.whatwg.org/section-index.html#index
MDN’s HTML reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Element
Skillcrush HTML tag cheatsheet: http://skillcrush.com/wp-content/uploads/2012/06/HTML-Cheatsheet-Skillcrush.pdf
OverAPI HTML cheatsheet: http://overapi.com/html
HTML validations: https://validator.w3.org/
CHARSETS: http://www.joelonsoftware.com/articles/Unicode.html&lt;/p&gt;

&lt;p&gt;CSS
OverAPI CSS Cheatsheet: http://overapi.com/jquery
CSS Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/Reference
W3’s CSS Reference: https://www.w3.org/TR/CSS21/propidx.html
CSS Specificity: http://specificity.keegan.st/
Box-Sizing: Border Box http://www.paulirish.com/2012/box-sizing-border-box-ftw/
Codepen: visually see what CSS elements do: http://codepen.io/carolineartz/full/ogVXZj/
Flexbox Cheat Sheet: http://jonibologna.com/flexbox-cheatsheet/
cute speech bubble maker: http://ilikepixels.co.uk/drop/bubbler/&lt;/p&gt;

&lt;p&gt;Bootstrap
Bootstrap: http://getbootstrap.com/
Bootstrap forms: https://bootstrapbay.com/blog/working-bootstrap-contact-form/&lt;/p&gt;

&lt;p&gt;DOM reading
OverAPI HTML-DOM cheatsheet: http://overapi.com/html-dom
MDN DOM docs https://developer.mozilla.org/en-US/docs/Web/API/document
w3schools DOM docs http://www.w3schools.com/jsref/dom_obj_document.asp
nutsplus DOM tutorial http://code.tutsplus.com/tutorials/javascript-and-the-dom-series-lesson-1–net-3134&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jan 2016 00:00:00 -0500</pubDate>
        <link>http://yourdomain.com/2016/01/01/frontend-uncategorized/</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/01/01/frontend-uncategorized/</guid>
        
        <category>frontend</category>
        
        
      </item>
    
      <item>
        <title>Uncategorized database stuff</title>
        <description>&lt;p&gt;SQL:
MySQL cheatsheet: http://overapi.com/mysql
SQL course:  http://www.sqlcourse.com/
SQL with Ruby Bastard’s book - http://ruby.bastardsbook.com/chapters/sql/
SQL with zetcode - http://zetcode.com/db/sqliteruby/connect/
SQLZoo tutorial: http://sqlzoo.net/wiki/SQL_Tutorial
Learn SQL the hard way: http://sql.learncodethehardway.org/book/
SQLite tutorial: http://zetcode.com/db/sqlite/
DBC’s SQLtutor: https://sqltutor.devbootcamp.com/&lt;/p&gt;

&lt;p&gt;PostgreSQL:
PostgreSQL exercises: https://pgexercises.com/&lt;/p&gt;

&lt;p&gt;Database tables designing tool: https://schemadesigner.devbootcamp.com/&lt;/p&gt;

&lt;p&gt;Seven Databases in Seven Weeks
Beginning Database Design&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jan 2016 00:00:00 -0500</pubDate>
        <link>http://yourdomain.com/2016/01/01/databases-uncategorized/</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/01/01/databases-uncategorized/</guid>
        
        <category>databases</category>
        
        
      </item>
    
  </channel>
</rss>
